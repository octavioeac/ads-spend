name: CI/CD n8n

on:
  push:
    branches: ["main"]
    paths:
      - "docker/**"
      - ".github/workflows/cicd.yml"

env:
  LOCATION: us
  REPO: n8n-repo
  IMAGE_NAME: n8n

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ steps.auth.outputs.project_id }}

      - name: Set PROJECT_ID
        run: echo "PROJECT_ID=${{ steps.auth.outputs.project_id }}" >> $GITHUB_ENV

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev -q

      - name: Build Docker image
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"
          docker build \
            -f docker/Dockerfile \
            --build-arg N8N_VERSION=1.108.2 \
            -t "$IMAGE:$TAG" -t "$IMAGE:latest" .

      - name: Test container (wait for health)
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"

          docker run -d --name n8n-test -p 5678:5678 \
            -e N8N_HOST=localhost \
            -e N8N_PROTOCOL=http \
            -e N8N_BASIC_AUTH_ACTIVE=true \
            -e N8N_BASIC_AUTH_USER=test \
            -e N8N_BASIC_AUTH_PASSWORD=test123 \
            "$IMAGE:$TAG"

          echo "Waiting for n8n /healthz ..."
          for i in $(seq 1 18); do
            if curl -fsS http://localhost:5678/healthz >/dev/null 2>&1; then
              echo "*** n8n is healthy ***"
              ok=1
              break
            fi
            echo "… not ready yet (${i}), sleeping 5s"
            sleep 5
            docker ps -a || true
            docker logs --tail=50 n8n-test || true
          done

          if [ "${ok:-0}" != "1" ]; then
            echo "n8n did not become healthy in time"
            docker ps -a || true
            docker logs n8n-test || true
            exit 7
          fi

          docker rm -f n8n-test

      - name: Push image to Artifact Registry
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"

  deploy-gce:
    needs: build-test-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      PROJECT_ID: n8n-ads-spend
      ZONE: us-central1-a
      LOCATION: us
      REPO: n8n-repo
      IMAGE_NAME: n8n

    steps:
      - uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/237577500123/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
          service_account: "github-test@n8n-ads-spend.iam.gserviceaccount.com"

      - name: Setup gcloud (with beta)
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: beta
          project_id: ${{ env.PROJECT_ID }}

      # 🔐 Ensure firewall rule (tcp/80) exists and tag is applied to VM
      - name: Ensure firewall rule (tcp/80) and tag on VM
        env:
          TAG_HTTP: n8n-http
        run: |
          set -euo pipefail

          # 1) Create firewall rule allow-n8n-http if it does not exist
          if ! gcloud compute firewall-rules describe allow-n8n-http \
               --project="${{ env.PROJECT_ID }}" >/dev/null 2>&1; then
            gcloud compute firewall-rules create allow-n8n-http \
              --project="${{ env.PROJECT_ID }}" \
              --allow=tcp:80 \
              --direction=INGRESS \
              --priority=1000 \
              --target-tags="${TAG_HTTP}" \
              --network=default
          else
            echo "Firewall rule allow-n8n-http already exists."
          fi

          # 2) Add tag n8n-http to VM if missing
          CURRENT_TAGS=$(gcloud compute instances describe n8n-vm \
            --project="${{ env.PROJECT_ID }}" \
            --zone="${{ env.ZONE }}" \
            --format="get(tags.items)" | tr ';' ',' | tr -d '[]')

          if echo "${CURRENT_TAGS}" | grep -qw "${TAG_HTTP}"; then
            echo "VM already has the ${TAG_HTTP} tag."
          else
            if [ -n "${CURRENT_TAGS}" ]; then
              NEW_TAGS="${CURRENT_TAGS},${TAG_HTTP}"
            else
              NEW_TAGS="${TAG_HTTP}"
            fi
            gcloud compute instances add-tags n8n-vm \
              --project="${{ env.PROJECT_ID }}" \
              --zone="${{ env.ZONE }}" \
              --tags="${NEW_TAGS}"
          fi

      - name: Build image ref for deploy
        id: img
        run: echo "IMAGE=${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

      - name: Write remote deploy script
        run: |
          cat > deploy_remote.sh <<'EOSH'
          #!/usr/bin/env bash
          set -euo pipefail
          IMAGE="$1"

          export DEBIAN_FRONTEND=noninteractive
          export NEEDRESTART_MODE=a

          # Install Docker avoiding man-db / needrestart hangs
          if ! command -v docker >/dev/null 2>&1; then
            sudo apt-get update -y -o Dpkg::Use-Pty=0

            # Optionally skip manpages for faster installs
            echo 'path-exclude=/usr/share/man/*' | sudo tee /etc/dpkg/dpkg.cfg.d/99skip-manpages >/dev/null || true

            # Divert mandb to /bin/true to prevent hanging
            if [ -x /usr/bin/mandb ]; then
              sudo dpkg-divert --local --rename --add /usr/bin/mandb || true
              sudo ln -sf /bin/true /usr/bin/mandb || true
            fi

            sudo apt-get install -y -o Dpkg::Use-Pty=0 --no-install-recommends docker.io
            sudo systemctl enable --now docker || true

            # Restore mandb
            if [ -L /usr/bin/mandb ]; then
              sudo rm -f /usr/bin/mandb || true
              sudo dpkg-divert --local --rename --remove /usr/bin/mandb || true
            fi

            # Ensure dpkg is clean
            sudo dpkg --configure -a || true
          fi

          # Artifact Registry auth
          gcloud auth configure-docker us-docker.pkg.dev --quiet || true

          # Environment variables for n8n
          sudo mkdir -p /data/n8n
          {
            echo "N8N_BASIC_AUTH_ACTIVE=true"
            echo "N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}"
            echo "N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}"
            echo "N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}"
            echo "N8N_HOST=$(curl -s ifconfig.me || echo localhost)"
            echo "N8N_PROTOCOL=http"
          } | sudo tee /data/n8n/.env >/dev/null

          # Deploy container
          sudo docker pull "${IMAGE}"
          sudo docker rm -f n8n || true
          sudo docker run -d --name n8n -p 80:5678 \
            --restart unless-stopped \
            --env-file /data/n8n/.env \
            -v /data/n8n:/home/node/.n8n \
            "${IMAGE}"

          sleep 10
          sudo docker logs n8n --tail=80 || true
          EOSH
          chmod +x deploy_remote.sh

      - name: Copy script to VM (beta scp)
        run: |
          gcloud beta compute scp ./deploy_remote.sh n8n-vm:/tmp/deploy_remote.sh \
            --project="${{ env.PROJECT_ID }}" \
            --zone="${{ env.ZONE }}"

      - name: Run remote deploy (beta ssh)
        env:
          IMAGE: ${{ steps.img.outputs.IMAGE }}
          N8N_BASIC_AUTH_USER: ${{ secrets.N8N_BASIC_AUTH_USER }}
          N8N_BASIC_AUTH_PASSWORD: ${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
          N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}
        run: |
          gcloud beta compute ssh n8n-vm \
            --project="${{ env.PROJECT_ID }}" \
            --zone="${{ env.ZONE }}" \
            --command "N8N_BASIC_AUTH_USER='${N8N_BASIC_AUTH_USER}' N8N_BASIC_AUTH_PASSWORD='${N8N_BASIC_AUTH_PASSWORD}' N8N_ENCRYPTION_KEY='${N8N_ENCRYPTION_KEY}' bash /tmp/deploy_remote.sh '${IMAGE}'"
