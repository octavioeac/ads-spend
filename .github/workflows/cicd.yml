name: CI/CD n8n

on:
  push:
    branches: ["main"]
    paths:
      - "docker/**"
      - ".github/workflows/cicd.yml"

env:
  LOCATION: us          
  REPO: n8n-repo
  IMAGE_NAME: n8n

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set PROJECT_ID
        run: echo "PROJECT_ID=${{ steps.auth.outputs.project_id }}" >> $GITHUB_ENV

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev -q

      - name: Build Docker image
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"
          docker build \
            -f docker/Dockerfile \
            --build-arg N8N_VERSION=1.108.2 \
            -t "$IMAGE:$TAG" -t "$IMAGE:latest" .

      - name: Test container (wait for health)
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"

          docker run -d --name n8n-test -p 5678:5678 \
            -e N8N_HOST=localhost \
            -e N8N_PROTOCOL=http \
            -e N8N_BASIC_AUTH_ACTIVE=true \
            -e N8N_BASIC_AUTH_USER=test \
            -e N8N_BASIC_AUTH_PASSWORD=test123 \
            "$IMAGE:$TAG"

          echo "Waiting for n8n /healthz ..."
          # Up to ~90s total (18 tries * 5s)
          for i in $(seq 1 18); do
            if curl -fsS http://localhost:5678/healthz >/dev/null 2>&1; then
              echo "*****  ***  n8n is healthy *** *** *** ***"
              ok=1
              break
            fi
            echo "â€¦ not ready yet (${i}), sleeping 5s"
            sleep 5
            # Print last lines to help with debugging while waiting
            docker ps -a || true
            docker logs --tail=50 n8n-test || true
          done

          if [ "${ok:-0}" != "1" ]; then
            echo "n8n did not become healthy in time"
            docker ps -a || true
            docker logs n8n-test || true
            exit 7
          fi

          # Clean up
          docker rm -f n8n-test


      - name: Push image to Artifact Registry
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"

  deploy-gce:
    needs: build-test-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
  
    env:
      PROJECT_ID: n8n-ads-spend
      ZONE: us-central1-a
      LOCATION: us
      REPO: n8n-repo
      IMAGE_NAME: n8n
  
    steps:
      - uses: actions/checkout@v4
  
      # Auth OIDC 
      - id: auth
        uses: google-github-actions/auth@v2
        with:
           workload_identity_provider: "projects/237577500123/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
           service_account: "github-test@n8n-ads-spend.iam.gserviceaccount.com"
  
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
  
      # - run: gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev --quiet
  
      - name: Deploy to GCE with OS Login (no SSH keys/users)
        run: |
          set -euo pipefail
  
          IMAGE="${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${IMAGE_NAME}:latest"
  
          gcloud compute ssh n8n-vm \
            --project="${PROJECT_ID}" \
            --zone="${ZONE}" \
            --tunnel-through-iap=false \
            --command "
              set -euo pipefail
  
              echo 'Ensuring gcloud on VM...'
              if ! command -v gcloud >/dev/null 2>&1; then
                sudo apt-get update -y
                sudo apt-get install -y curl apt-transport-https ca-certificates gnupg
                echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main' | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
                curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
                sudo apt-get update -y && sudo apt-get install -y google-cloud-cli
              fi
  
              echo 'Ensuring Docker on VM...'
              if ! command -v docker >/dev/null 2>&1; then
                sudo apt-get update -y && sudo apt-get install -y docker.io
                sudo systemctl enable --now docker
              fi
  
              echo 'Configure Docker for Artifact Registry...'
              gcloud auth configure-docker ${LOCATION}-docker.pkg.dev --quiet || true
  
              echo 'Prepare n8n env...'
              sudo mkdir -p /data/n8n
              if [ ! -f /data/n8n/.env ]; then
                echo 'N8N_BASIC_AUTH_ACTIVE=true'                            | sudo tee /data/n8n/.env
                echo 'N8N_BASIC_AUTH_USER=${{ secrets.N8N_BASIC_AUTH_USER }}'         | sudo tee -a /data/n8n/.env
                echo 'N8N_BASIC_AUTH_PASSWORD=${{ secrets.N8N_BASIC_AUTH_PASSWORD }}' | sudo tee -a /data/n8n/.env
                echo 'N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY }}'           | sudo tee -a /data/n8n/.env
                echo 'N8N_HOST=$(curl -s ifconfig.me || echo localhost)'              | sudo tee -a /data/n8n/.env
                echo 'N8N_PROTOCOL=http'                                             | sudo tee -a /data/n8n/.env
              fi
  
              echo 'Pull & run n8n...'
              sudo docker pull '${IMAGE}'
              sudo docker rm -f n8n || true
              sudo docker run -d --name n8n -p 80:5678 \
                --restart unless-stopped \
                --env-file /data/n8n/.env \
                -v /data/n8n:/home/node/.n8n \
                '${IMAGE}'
  
              echo 'Logs:'
              sleep 10
              sudo docker logs n8n --tail=80 || true
            "
