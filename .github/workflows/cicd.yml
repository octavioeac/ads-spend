name: CI/CD n8n

on:
  push:
    branches: ["main"]
    paths:
      - "docker/**"
      - ".github/workflows/cicd.yml"

env:
  LOCATION: us           # "us" if your Artifact Registry is multi-region (us-docker.pkg.dev)
  REPO: n8n-repo
  IMAGE_NAME: n8n

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set PROJECT_ID
        run: echo "PROJECT_ID=${{ steps.auth.outputs.project_id }}" >> $GITHUB_ENV

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev -q

      - name: Build Docker image
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"
          docker build \
            -f docker/Dockerfile \
            --build-arg N8N_VERSION=1.108.2 \
            -t "$IMAGE:$TAG" -t "$IMAGE:latest" .

      - name: Test container(healthcheck)
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"
          docker run -d --name n8n-test -p 5678:5678 \
            -e N8N_HOST=localhost \
            -e N8N_PROTOCOL=http \
            -e N8N_BASIC_AUTH_ACTIVE=true \
            -e N8N_BASIC_AUTH_USER=test \
            -e N8N_BASIC_AUTH_PASSWORD=test123 \
            "$IMAGE:$TAG"
          echo "⏳ Waiting for n8n to start..."
          sleep 20
          curl -fsS http://localhost:5678/healthz
          docker logs n8n-test --tail=60 || true
          docker rm -f n8n-test

      - name: Push image to Artifact Registry
        run: |
          IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}"
          TAG="${GITHUB_SHA::8}"
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"

  deploy-gce:
    needs: build-test-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GCE VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCE_VM_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e

            echo "Ensuring gcloud is installed..."
            if ! command -v gcloud >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y curl apt-transport-https ca-certificates gnupg
              echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
              curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
              sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            fi

            echo "Ensuring Docker is installed..."
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update && sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
            fi

            echo "Configuring Docker to use Artifact Registry..."
            gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev -q || true

            echo "Resolving PROJECT_ID..."
            PROJECT_ID=$(curl -s -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/project/project-id || true)
            if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "(unset)" ]; then
              PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
            fi
            if [ -z "$PROJECT_ID" ]; then
              echo "PROJECT_ID not detected. Please set secret GCP_PROJECT_ID."
              exit 1
            fi

            IMAGE="${{ env.LOCATION }}-docker.pkg.dev/${PROJECT_ID}/${{ env.REPO }}/${{ env.IMAGE_NAME }}:latest"

            echo "📦 Preparing environment file..."
            sudo mkdir -p /data/n8n
            if [ ! -f /data/n8n/.env ]; then
              echo "N8N_BASIC_AUTH_ACTIVE=true" | sudo tee /data/n8n/.env
              echo "N8N_BASIC_AUTH_USER=${{ secrets.N8N_BASIC_AUTH_USER }}"         | sudo tee -a /data/n8n/.env
              echo "N8N_BASIC_AUTH_PASSWORD=${{ secrets.N8N_BASIC_AUTH_PASSWORD }}" | sudo tee -a /data/n8n/.env
              echo "N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY }}"           | sudo tee -a /data/n8n/.env
              echo "N8N_HOST=$(curl -s ifconfig.me || echo localhost)"              | sudo tee -a /data/n8n/.env
              echo "N8N_PROTOCOL=http"                                             | sudo tee -a /data/n8n/.env
            fi

            echo "eploying latest container..."
            sudo docker pull "$IMAGE"
            sudo docker rm -f n8n || true
            sudo docker run -d --name n8n -p 80:5678 \
              --restart unless-stopped \
              --env-file /data/n8n/.env \
              -v /data/n8n:/home/node/.n8n \
              "$IMAGE"

            echo "Deployment done. Checking logs..."
            sleep 10
            sudo docker logs n8n --tail=80 || true
